local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/Shaman.lua'))()
local Flags = Library.Flags

local Window = Library:Window({
    Text = "Hydronic Scripts | BedWars"
})

--[Tabs]--

local CombatTab = Window:Tab({
    Text = "Combat"
})

local MovementTab = Window:Tab({
    Text = "Movement"
})

local RenderTab = Window:Tab({
    Text = "Render"
})

local OtherTab = Window:Tab({
    Text = "Other"
})

--[Section Creation]--

local AimlockSection = CombatTab:Section({
    Text = "Aimlock"
})

local ReachSection = CombatTab:Section({
    Text = "Reach",
    Side = "Right"
})

local AntiKnockbackSection = CombatTab:Section({
    Text = "Anti Knockback",
    Side = "Right"
})

local AutoSprintSection = MovementTab:Section({
    Text = "Auto Sprint"
})

local BHopSection = MovementTab:Section({
    Text = "BHop",
    Side = "Right"
})

local SpeedSection = MovementTab:Section({
    Text = "Speed"
})

local LowGravitySection = MovementTab:Section({
    Text = "Low Gravity",
    Side = "Right"
})

local NoFallSection = MovementTab:Section({
    Text = "No Fall"
})

local HighJumpSection = MovementTab:Section({
    Text = "High Jump",
    Side = "Right"
})

local StepJumpSection = MovementTab:Section({
    Text = "Step Jump"
})

local SpiderSection = MovementTab:Section({
    Text = "Spider",
    Side = "Right"
})

local ESPSection = RenderTab:Section({
    Text = "ESP"
})

local ChestESPSection = RenderTab:Section({
    Text = "Chest ESP",
    Side = "Right"
})

local NametagsSection = RenderTab:Section({
    Text = "Nametags"
})

local BedESPSection = RenderTab:Section({
    Text = "Bed ESP",
    Side = "Right"
})

local AdvertiseBotSection = OtherTab:Section({
    Text = "Advertise Bot"
})

local AutoChatSection = OtherTab:Section({
    Text = "Auto Chat",
    Side = "Right"
})

local AutoStartGameSection = OtherTab:Section({
    Text = "Auto Queue"
})

local ShopSection = OtherTab:Section({
    Text = "Shop",
    Side = "Right"
})

--[Code]--

ReachSection:Slider({
    Text = "Distance",
    Default = 12,
    Minimum = 0,
    Maximum = 18,
    Flag = "SliderFlag",
    Callback = function(v)
       local reacher = require(game:GetService("ReplicatedStorage").TS.combat["combat-constant"]).CombatConstant
       reacher.RAYCAST_SWORD_CHARACTER_DISTANCE = v
    end
})

--[Aimlock Section]--

AimlockSection:Button({
    Text = "Enable Aimlock",
    Tooltip = "Hold right click to aim at the user in the circle.",
    Callback = function()
    local teamCheck = true
    local fov = 150
    local smoothing = 1
    
    local RunService = game:GetService("RunService")
    
    local FOVring = Drawing.new("Circle")
    FOVring.Visible = true
    FOVring.Thickness = 1.5
    FOVring.Radius = fov
    FOVring.Transparency = 1
    FOVring.Color = Color3.fromRGB(0, 170, 255)
    FOVring.Position = workspace.CurrentCamera.ViewportSize/2
    
    local function getClosest(cframe)
       local ray = Ray.new(cframe.Position, cframe.LookVector).Unit
       
       local target = nil
       local mag = math.huge
       
       for i,v in pairs(game.Players:GetPlayers()) do
           if v.Character and v.Character:FindFirstChild("Head") and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("HumanoidRootPart") and v ~= game.Players.LocalPlayer and (v.Team ~= game.Players.LocalPlayer.Team or (not teamCheck)) then
               local magBuf = (v.Character.Head.Position - ray:ClosestPoint(v.Character.Head.Position)).Magnitude
               
               if magBuf < mag then
                   mag = magBuf
                   target = v
               end
           end
       end
       
       return target
    end
    
    loop = RunService.RenderStepped:Connect(function()
       local UserInputService = game:GetService("UserInputService")
       local pressed = --[[UserInputService:IsKeyDown(Enum.KeyCode.E)]] UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) --Enum.UserInputType.MouseButton2
       local localPlay = game.Players.localPlayer.Character
       local cam = workspace.CurrentCamera
       local zz = workspace.CurrentCamera.ViewportSize/2
       
       if pressed then
           local Line = Drawing.new("Line")
           local curTar = getClosest(cam.CFrame)
           local ssHeadPoint = cam:WorldToScreenPoint(curTar.Character.Head.Position)
           ssHeadPoint = Vector2.new(ssHeadPoint.X, ssHeadPoint.Y)
           if (ssHeadPoint - zz).Magnitude < fov then
               workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(CFrame.new(cam.CFrame.Position, curTar.Character.Head.Position), smoothing)
           end
       end
       
       if UserInputService:IsKeyDown(Enum.KeyCode.Delete) then
           loop:Disconnect()
           FOVring:Remove()
       end
    end)
  end
})


local label = AimlockSection:Label({
    Text = "Customizing will come soon",
    Color = Color3.fromRGB(0, 170, 255),
})

AntiKnockbackSection:Button({
    Text = "Enable Anti Knockback",
    Tooltip = "No knockback taken when hit",
    Callback = function()
    local plr = game:GetService("Players").LocalPlayer

    plr.Character.Humanoid.HealthChanged:Connect(function()
    plr.Character.HumanoidRootPart.Anchored = true
    game:GetService("RunService").RenderStepped:Wait()
    plr.Character.HumanoidRootPart.Anchored = false
    end)
    end
})

AutoSprintSection:Toggle({
    Text = "Auto Sprint",
    Tooltip = "Automatically runs for you",
    Callback = function(v)
        if v == true then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20
            else
             game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
             end
    end
})

BHopSection:Button({
    Text = "Enable BHop",
    Tooltip = "Constantly jumping to make it harder for enemies to hit you",
    Callback = function()
        while wait() do
            game:GetService("Players").LocalPlayer.Character.Humanoid.Jump = true
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = 20
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 20
                game.Workspace.Gravity = 63
            end
    end
})

SpeedSection:Button({
    Text = "Enable Speed",
    Tooltip = "Run at a quicker pace",
    Callback = function()
        local plr = game:GetService("Players").LocalPlayer
        local hum = plr.Character.Humanoid
        local rs = game:GetService("RunService")
        
        local a
        a = rs.Heartbeat:Connect(function(delta)
            if not hum or not hum.RootPart then
                a:Disconnect()
                return
            end
            if hum.MoveDirection ~= Vector3.new(0, 0, 0) then
                hum.RootPart.CFrame = (hum.RootPart.CFrame + hum.MoveDirection * delta * 100 * .11)
            end
        end)
    end
})

LowGravitySection:Toggle({
    Text = "Low Gravity",
    Tooltip = "Lower gravity so you can fly further",
    Callback = function(v)
    if v == true then
        game.Workspace.Gravity = 20
        else
        game.Workspace.Gravity = 196.2
        end
    end
})

NoFallSection:Button({
    Text = "Enable No Fall",
    Tooltip = "Take no damage when falling from heights",
    Callback = function()
        local plr = game:GetService("Players").LocalPlayer
        local hum = plr.Character.Humanoid
        local rpls = game:GetService("ReplicatedStorage")
        
        local function getState(hum)
            return hum:GetState()
        end
        
        local default = require(rpls.TS.remotes).default
        local Client = default.Client
        local GroundHit = Client:Get("GroundHit")
        
        hum.StateChanged:Connect(function(old,new)
            if new == Enum.HumanoidStateType.Freefall then
                repeat
                    task.wait(.1)
                    GroundHit:SendToServer()
                until getState(hum) ~= Enum.HumanoidStateType.Freefall
            end
        end)
    end
})

HighJumpSection:Button({
    Text = "Enable High Jump",
    Tooltip = "Jump height increases by a lot",
    Callback = function()
    local playa = game.Players.LocalPlayer.Character.HumanoidRootPart
    local bf = Instance.new("BodyForce")
    bf.Parent = playa
    bf.Force = Vector3.new(0, 2100, 0)
    end
})

StepJumpSection:Button({
    Text = "Enable Step Jump",
    Tooltip = "Fly upwards when holding space",
    Callback = function()
        local plr = game:GetService("Players").LocalPlayer
        
        plr.Character.Humanoid:GetPropertyChangedSignal("Jump"):Connect(function()
            while plr.Character.Humanoid.Jump and task.wait() do
                plr.Character.Humanoid.RootPart.CFrame = plr.Character.Humanoid.RootPart.CFrame + Vector3.new(0, .99, 0)
                plr.Character.Humanoid.RootPart.Velocity =
                    plr.Character.Humanoid.RootPart.Velocity +
                    Vector3.new(
                        plr.Character.Humanoid.MoveDirection.X * 2,
                        plr.Character.Humanoid.MoveDirection.Y,
                        plr.Character.Humanoid.MoveDirection.Z * 2
                    )
            end
        end)
    end
})

SpiderSection:Button({
    Text = "Spider",
    Tooltip = "Climb walls like a spider",
    Callback = function()
        while wait() do
        local wall = nil
        local spiderspeed = 24
        local lplr = game.Players.LocalPlayer
        local raycastparameters = RaycastParams.new()
        raycastparameters.FilterDescendantsInstances = {lplr.Character}
        local ray = workspace:Raycast(lplr.Character.Humanoid.LeftLeg.Position, lplr.Character.HumanoidRootPart.CFrame.LookVector * 1.3, raycastparameters)
        wall = ray and ray.Instance or nil
        if wall then
        	lplr.Character.HumanoidRootPart.Velocity = Vector3.new(lplr.Character.HumanoidRootPart.Velocity.X or 0, spiderspeed, lplr.Character.HumanoidRootPart.Velocity.Z or 0)
        		if lplr.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then
        			lplr.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
        		end
        	end
        end
    end
})

ESPSection:Button({
    Text = "Enable ESP",
    Tooltip = "Puts a box around everyone so you can locate users quickly",
    Callback = function()
        local plrs = game:GetService("Players")
        local rs = game:GetService("RunService")
        
        local function esp(v)
            if v:FindFirstChild("Humanoid") then
                local square = Drawing.new("Square")
                local CurrentCamera = game:GetService("Workspace").CurrentCamera
                local worldToViewportPoint = CurrentCamera.worldToViewportPoint
                local Humanoid = v.Humanoid
                local RootPart = Humanoid.RootPart
                local Head = v:FindFirstChild("Head")
                local RootPosition, RootVis, HeadPosition, LegPosition
                local plr = plrs:GetPlayerFromCharacter(v)
                square.Filled = false
                square.Transparency = 1
                square.Thickness = 2
                
                local a
                a = rs.RenderStepped:Connect(function()
                    if not v or not Head or not v.Parent or not RootPart or not Humanoid or v.Humanoid.Health == 0 then
                        square:Remove()
                        a:Disconnect()
                        return
                    end
                    RootPosition, RootVis = worldToViewportPoint(CurrentCamera, RootPart.Position)
                    HeadPosition = worldToViewportPoint(CurrentCamera, Head.Position + Vector3.new(0, 0.5, 0))
                    LegPosition = worldToViewportPoint(CurrentCamera, RootPart.Position - Vector3.new(0,3,0))
                    local vector, onScreen = CurrentCamera:WorldToViewportPoint(RootPart.Position)
                    if onScreen then
                        square.Visible = true
                        square.Size = Vector2.new(1000 / RootPosition.Z*2.5, (HeadPosition.Y - LegPosition.Y)*1.1)
                        square.Position =  Vector2.new(RootPosition.X - square.Size.X / 2, (RootPosition.Y - square.Size.Y / 2)+6)
                        square.Color = plr.TeamColor.Color
                    else
                        square.Visible = false
                    end
                end)
            end
        end
        for i,v in pairs(plrs:GetChildren()) do
            if v ~= plrs.LocalPlayer then
                if v.Character and v.Character:FindFirstChild("Humanoid") and v.Character:FindFirstChild("Head") and v.Character.Humanoid.RootPart then
                    esp(v.Character)
                end
                v.CharacterAdded:Connect(function(v)
                    repeat wait() until v:FindFirstChild("Humanoid") and v:FindFirstChild("Head") and v.Humanoid.RootPart
                    esp(v)
                end)
            end
        end
        
        plrs.PlayerAdded:Connect(function(v)
            v.CharacterAdded:Connect(function(v)
                repeat wait() until v:FindFirstChild("Humanoid") and v:FindFirstChild("Head") and v.Humanoid.RootPart
                esp(v)
            end)
        end)
    end
})

BedESPSection:Button({
    Text = "Enable Bed ESP",
    Tooltip = "Puts a box around beds so you can locate beds easily",
    Callback = function()
        local espParts = {}
        local partEspTrigger = nil
        function partAdded(part)
        	if #espParts > 0 then
        		if FindInTable(espParts,part.Name:lower()) then
        			local a = Instance.new("BoxHandleAdornment")
        			a.Name = part.Name:lower().."_PESP"
        			a.Parent = part
        			a.Adornee = part
        			a.AlwaysOnTop = true
        			a.ZIndex = 0
        			a.Size = part.Size
        			a.Transparency = 0.3
        			a.Color = BrickColor.new("Lime green")
        		end
        	else
        		partEspTrigger:Disconnect()
        		partEspTrigger = nil
        	end
        end
        
        local partEspName = "bed"
        		for i,v in pairs(workspace:GetDescendants()) do
        			if v:IsA("BasePart") and v.Name:lower() == partEspName then
        				local a = Instance.new("BoxHandleAdornment")
        				a.Name = "nova6_esp_brick"
        				a.Parent = v
        				a.Adornee = v
        				a.AlwaysOnTop = true
        				a.ZIndex = 0
        				a.Size = v.Size
        				a.Transparency = 0.20
        				a.Color = BrickColor.new(255,255,255)
        			end
        		end
        	if partEspTrigger == nil then
        		partEspTrigger = workspace.DescendantAdded:Connect(partAdded)
        end
    end
})

ChestESPSection:Button({
    Text = "Enable Chest ESP",
    Tooltip = "Puts a box around chests so you can locate chests easily",
    Callback = function()
        local espParts = {}
        local partEspTrigger = nil
        function partAdded(part)
        	if #espParts > 0 then
        		if FindInTable(espParts,part.Name:lower()) then
        			local a = Instance.new("BoxHandleAdornment")
        			a.Name = part.Name:lower().."_PESP"
        			a.Parent = part
        			a.Adornee = part
        			a.AlwaysOnTop = true
        			a.ZIndex = 0
        			a.Size = part.Size
        			a.Transparency = 0.3
        			a.Color = BrickColor.new("Lime green")
        		end
        	else
        		partEspTrigger:Disconnect()
        		partEspTrigger = nil
        	end
        end
        
        local partEspName = "chest"
        		for i,v in pairs(workspace:GetDescendants()) do
        			if v:IsA("BasePart") and v.Name:lower() == partEspName then
        				local a = Instance.new("BoxHandleAdornment")
        				a.Name = partEspName.."_PESP"
        				a.Parent = v
        				a.Adornee = v
        				a.AlwaysOnTop = true
        				a.ZIndex = 0
        				a.Size = v.Size
        				a.Transparency = 0.45
        				a.Color = BrickColor.new(255,255,255)
        			end
        		end
        	if partEspTrigger == nil then
        		partEspTrigger = workspace.DescendantAdded:Connect(partAdded)
        end
    end
})

NametagsSection:Button({
    Text = "Enable Nametags",
    Tooltip = "Makes nametags larger so you can find users quickly",
    Callback = function()
        local plrs = game:GetService("Players")
        
        for i,v in pairs(plrs:GetChildren()) do
            if not v.Character or not v.Character:FindFirstChild("Head") or not v.Character.Head:FindFirstChild("Nametag") or v == plrs.LocalPlayer then continue end
            v.Character.Head.Nametag.MaxDistance = 1e12
            v.Character.Head.Nametag.DisplayNameContainer.Size = UDim2.new(4,0,4,0)
            v.CharacterAdded:Connect(function(v)
                coroutine.wrap(function()
                    repeat task.wait() until v:FindFirstChild("Head") and v.Head:FindFirstChild("Nametag")
                    if v:FindFirstChild("Head") and v.Head:FindFirstChild("Nametag") then
                        v.Head.Nametag.MaxDistance = 1e12
                        v.Head.Nametag.DisplayNameContainer.Size = UDim2.new(4,0,4,0)
                    end
                end)()
            end)
        end
    end
})

AdvertiseBotSection:Button({
    Text = "Mode 1",
    Tooltip = "Spams the advertisement in chat",
    Callback = function()
        while true do
            wait(5)
            local args = {
            [1] = "Use Hydronic Scripts today, gg/YGAM7aD5Py",
            [2] = "All"
        }
        
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
        end
    end
})

AdvertiseBotSection:Button({
    Text = "Mode 2",
    Tooltip = "Teleports to everyone and spams the advertisement",
    Callback = function()
            while true do
            wait(0.0001)
            local randomPlayer = game.Players:GetPlayers()
        [math.random(1,#game.Players:GetPlayers())]
        
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(randomPlayer.Character.Head.Position.X, randomPlayer.Character.Head.Position.Y, randomPlayer.Character.Head.Position.Z))
            wait(1)
            local args = {
            [1] = "Use Nova6 today, gg/6Jc5D9rRvc",
            [2] = "All"
        }
        
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
        end 
    end
})

AutoChatSection:Button({
    Text = "Auto Chat",
    Tooltip = "Automatically chats people for you",
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/bG5rSXpF"))()
    end
})

AutoStartGameSection:Button({
    Text = "Auto Queue",
    Tooltip = "Starts the game automatically once its finished",
    Callback = function()
            while wait(1) do
                 if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("spectate-selector") then
                 game:GetService("ReplicatedStorage")["events-@easy-games/lobby:shared/event/lobby-events@getEvents.Events"].joinQueue:FireServer({["queueType"] = "bedwars_to1"})
            end
        end
    end
})

ShopSection:Label({
    Text = "Blocks",
    Color = Color3.fromRGB(0, 170, 255)
})

ShopSection:Button({
    Text = "Buy Wool",
    Tooltip = "Purchases wool from the ingame shop",
    Callback = function()
                local args = {
            [1] = {
                ["shopItem"] = {
                    ["currency"] = "iron",
                    ["itemType"] = "wool_white",
                    ["amount"] = 16,
                    ["price"] = 8,
                    ["category"] = "Blocks"
                }
            }
        }
        
        game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.BedwarsPurchaseItem:InvokeServer(unpack(args))

    end
})

ShopSection:Label({
    Text = "Armor",
    Color = Color3.fromRGB(0, 170, 255)
})

ShopSection:Button({
    Text = "Buy Leather Armor",
    Tooltip = "Purchases leather armor from the ingame shop",
    Callback = function()
              local args = {
            [1] = {
                ["shopItem"] = {
                    ["lockAfterPurchase"] = true,
                    ["itemType"] = "leather_chestplate",
                    ["price"] = 50,
                    ["customDisplayName"] = "Leather Armor",
                    ["currency"] = "iron",
                    ["amount"] = 1,
                    ["category"] = "Combat",
                    ["ignoredByKit"] = {
                        [1] = "bigman"
                    },
                    ["spawnWithItems"] = {
                        [1] = "leather_helmet",
                        [2] = "leather_chestplate",
                        [3] = "leather_boots"
                    },
                    ["nextTier"] = "iron_chestplate"
                }
            }
        }
        
        game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.BedwarsPurchaseItem:InvokeServer(unpack(args))
    end
})

ShopSection:Button({
    Text = "Buy Iron Armor",
    Tooltip = "Purchases iron armor from the ingame shop",
    Callback = function()
                local args = {
            [1] = {
                ["shopItem"] = {
                    ["lockAfterPurchase"] = true,
                    ["itemType"] = "iron_chestplate",
                    ["price"] = 120,
                    ["customDisplayName"] = "Iron Armor",
                    ["currency"] = "iron",
                    ["amount"] = 1,
                    ["category"] = "Combat",
                    ["ignoredByKit"] = {
                        [1] = "bigman"
                    },
                    ["spawnWithItems"] = {
                        [1] = "iron_helmet",
                        [2] = "iron_chestplate",
                        [3] = "iron_boots"
                    },
                    ["nextTier"] = "diamond_chestplate"
                }
            }
        }
        
        game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.BedwarsPurchaseItem:InvokeServer(unpack(args))

    end
})

ShopSection:Button({
    Text = "Buy Diamond Armor",
    Tooltip = "Purchases diamond armor from the ingame shop",
    Callback = function()
                local args = {
            [1] = {
                ["shopItem"] = {
                    ["lockAfterPurchase"] = true,
                    ["itemType"] = "diamond_chestplate",
                    ["price"] = 8,
                    ["customDisplayName"] = "Diamond Armor",
                    ["currency"] = "emerald",
                    ["amount"] = 1,
                    ["category"] = "Combat",
                    ["ignoredByKit"] = {
                        [1] = "bigman"
                    },
                    ["spawnWithItems"] = {
                        [1] = "diamond_helmet",
                        [2] = "diamond_chestplate",
                        [3] = "diamond_boots"
                    },
                    ["nextTier"] = "emerald_chestplate"
                }
            }
        }
        
        game:GetService("ReplicatedStorage").rbxts_include.node_modules:FindFirstChild("@rbxts").net.out._NetManaged.BedwarsPurchaseItem:InvokeServer(unpack(args))

    end
})

CombatTab:Select()

wait(5)

--[[dropdown:Refresh({
    List = {"Head", "Feet"}
})--]]

label:Set({
    Text = "Customizing will come soon"
})
